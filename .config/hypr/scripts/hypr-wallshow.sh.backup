#!/usr/bin/env bash

# ========================
# Universal Wallpaper Manager
# A complete, feature-rich wallpaper management system
# Supporting static/dynamic wallpapers across all desktop environments
# ========================

# ========================
# Configuration & State
# ========================

declare -gr SCRIPT_NAME="${0##*/}"
declare -gr VERSION="2.0.0"
declare -gr CONFIG_FILE="${HOME}/.config/hypr/hypr-wallshow.conf"

# Enhanced tool support for maximum compatibility
declare -ga WAYLAND_TOOLS=("swww" "swaybg" "hyprpaper" "wbg" "wpaperd" "oguri" "azote")
declare -ga XORG_TOOLS=("feh" "xwallpaper" "nitrogen" "hsetroot" "bgs" "xsetroot")
declare -ga UNIVERSAL_TOOLS=("wal" "matugen" "wpgtk")
declare -ga ANIMATION_TOOLS=("mpvpaper" "xwinwrap" "paperview")
declare -ga PREVIEW_TOOLS=("chafa" "viu" "catimg" "img2txt" "timg")
declare -ga REQUIRED_TOOLS=("find" "shuf" "identify" "md5sum")

declare -gA PATHS=(
	[static]="${HOME}/Pictures/wallpapers"
	[dynamic]="${HOME}/Pictures/wallpapers/gifs"
	[videos]="${HOME}/Pictures/wallpapers/videos"
	[log]="${HOME}/.cache/wallpaper_manager.log"
	[state_dir]="${HOME}/.cache/wallpaper-slideshow"
	[config]="${CONFIG_FILE}"
)

declare -gA DURATION=(
	[change]=540           # Slideshow interval in seconds
	[transition]=0.7       # Transition duration
	[gif_speed]=0.05       # GIF frame delay
	[video_loop]=true      # Loop videos
)

declare -gA STATE=(
	[status]="stopped"
	[battery]="unknown"
	[session_type]="${XDG_SESSION_TYPE:-unknown}"
	[desktop]="${XDG_CURRENT_DESKTOP:-unknown}"
	[compositor]="${XDG_SESSION_DESKTOP:-unknown}"
	[pid]=""
	[animation_pid]=""
	[current_tool]=""
	[current_wallpaper]=""
	[last_change]="0"
	[seed_initialized]="false"
)

declare -gA FEATURES=(
	[preview_available]="false"
	[animation_available]="false"
	[wayland_support]="false"
	[xorg_support]="false"
	[battery_detection]="false"
)

declare -g LOG_LEVEL="INFO"
declare -ga SUPPORTED_FORMATS=("jpg" "jpeg" "png" "gif" "webp" "bmp" "tiff" "svg" "mp4" "mkv" "avi" "webm")

# ========================
# System Detection & Initialization
# ========================

detect_environment() {
	# Detect session type
	if [[ -n "${WAYLAND_DISPLAY:-}" ]] || [[ "${XDG_SESSION_TYPE}" == "wayland" ]]; then
		STATE[session_type]="wayland"
		FEATURES[wayland_support]="true"
	elif [[ -n "${DISPLAY:-}" ]] || [[ "${XDG_SESSION_TYPE}" == "x11" ]]; then
		STATE[session_type]="x11"
		FEATURES[xorg_support]="true"
	fi
	
	# Detect desktop environment
	local desktop="${XDG_CURRENT_DESKTOP,,}"
	case "${desktop}" in
		*hyprland*) STATE[desktop]="hyprland" ;;
		*sway*) STATE[desktop]="sway" ;;
		*kde*|*plasma*) STATE[desktop]="kde" ;;
		*gnome*) STATE[desktop]="gnome" ;;
		*xfce*) STATE[desktop]="xfce" ;;
		*i3*) STATE[desktop]="i3" ;;
		*bspwm*) STATE[desktop]="bspwm" ;;
		*openbox*) STATE[desktop]="openbox" ;;
		*) STATE[desktop]="unknown" ;;
	esac
	
	# Detect compositor
	if pgrep -x "hyprland" >/dev/null 2>&1; then
		STATE[compositor]="hyprland"
	elif pgrep -x "sway" >/dev/null 2>&1; then
		STATE[compositor]="sway"
	elif pgrep -x "weston" >/dev/null 2>&1; then
		STATE[compositor]="weston"
	elif pgrep -x "kwin_wayland" >/dev/null 2>&1; then
		STATE[compositor]="kwin"
	fi
	
	log DEBUG "Environment: ${STATE[session_type]} | Desktop: ${STATE[desktop]} | Compositor: ${STATE[compositor]}"
}

detect_battery() {
	local battery_paths=("/sys/class/power_supply/BAT"* "/sys/class/power_supply/battery")
	
	for path in "${battery_paths[@]}"; do
		if [[ -f "${path}/status" ]]; then
			local status
			status=$(tr '[:upper:]' '[:lower:]' < "${path}/status" 2>/dev/null || echo "unknown")
			STATE[battery]="${status}"
			FEATURES[battery_detection]="true"
			log DEBUG "Battery status detected: ${status}"
			return 0
		fi
	done
	
	# Fallback: check if laptop/battery exists via other methods
	if command -v acpi >/dev/null 2>&1; then
		local acpi_output
		acpi_output=$(acpi -b 2>/dev/null | head -n1 || echo "")
		if [[ "${acpi_output}" == *"Discharging"* ]]; then
			STATE[battery]="discharging"
			FEATURES[battery_detection]="true"
		elif [[ "${acpi_output}" == *"Charging"* ]]; then
			STATE[battery]="charging"
			FEATURES[battery_detection]="true"
		fi
	fi
	
	log DEBUG "Battery detection: ${FEATURES[battery_detection]} | Status: ${STATE[battery]}"
}

detect_capabilities() {
	# Check for preview tools
	for tool in "${PREVIEW_TOOLS[@]}"; do
		if command -v "${tool}" >/dev/null 2>&1; then
			FEATURES[preview_available]="true"
			log DEBUG "Preview tool available: ${tool}"
			break
		fi
	done
	
	# Check for animation tools
	for tool in "${ANIMATION_TOOLS[@]}"; do
		if command -v "${tool}" >/dev/null 2>&1; then
			FEATURES[animation_available]="true"
			log DEBUG "Animation tool available: ${tool}"
			break
		fi
	done
	
	# Verify required tools
	local missing_tools=()
	for tool in "${REQUIRED_TOOLS[@]}"; do
		if ! command -v "${tool}" >/dev/null 2>&1; then
			missing_tools+=("${tool}")
		fi
	done
	
	if [[ ${#missing_tools[@]} -gt 0 ]]; then
		log ERROR "Missing required tools: ${missing_tools[*]}"
		echo "Please install the following required tools: ${missing_tools[*]}" >&2
		exit 1
	fi
}

load_config() {
	[[ -f "${CONFIG_FILE}" ]] && {
		log DEBUG "Loading configuration from ${CONFIG_FILE}"
		# shellcheck source=/dev/null
		source "${CONFIG_FILE}"
	}
}

create_state_paths() {
	local dirs=("${PATHS[state_dir]}" "$(dirname "${PATHS[log]}")")
	
	for dir in "${dirs[@]}"; do
		[[ ! -d "${dir}" ]] && {
			mkdir -p "${dir}" || {
				log ERROR "Failed to create directory: ${dir}"
				exit 1
			}
		}
	done
	
	[[ ! -f "${PATHS[log]}" ]] && touch "${PATHS[log]}"
}

cleanup_old_data() {
	# Clean old frame directories
	find "${PATHS[state_dir]}" -mindepth 1 -maxdepth 1 -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
	
	# Rotate log file if too large (>10MB)
	[[ -f "${PATHS[log]}" ]] && {
		local log_size
		log_size=$(stat -f%z "${PATHS[log]}" 2>/dev/null || stat -c%s "${PATHS[log]}" 2>/dev/null || echo 0)
		if [[ ${log_size} -gt 10485760 ]]; then
			mv "${PATHS[log]}" "${PATHS[log]}.old"
			touch "${PATHS[log]}"
			log INFO "Log file rotated"
		fi
	}
}

init_random_seed() {
	if [[ "${STATE[seed_initialized]}" == "false" ]]; then
		# Initialize with high-quality entropy
		if [[ -r /dev/urandom ]]; then
			RANDOM=$(od -An -N4 -tu < /dev/urandom | tr -d ' ')
		else
			RANDOM=$(( $(date +%s%N) % 32768 ))
		fi
		STATE[seed_initialized]="true"
		log DEBUG "Random seed initialized: ${RANDOM}"
	fi
}

init() {
	detect_environment
	detect_battery  
	detect_capabilities
	load_config
	create_state_paths
	cleanup_old_data
	init_random_seed
	get_pids
	
	trap cleanup_and_exit INT TERM EXIT
	log INFO "Universal Wallpaper Manager v${VERSION} initialized"
}

# ========================
# Enhanced Logging System
# ========================

log() {
	local level="$1" msg="$2"
	local timestamp
	timestamp=$(date '+%Y-%m-%d %H:%M:%S')
	
	declare -A log_levels=([DEBUG]=0 [INFO]=1 [WARNING]=2 [ERROR]=3)
	declare -A log_colors=([DEBUG]='\033[0;36m' [INFO]='\033[0;32m' [WARNING]='\033[0;33m' [ERROR]='\033[0;31m')
	
	# Check log level
	[[ ${log_levels[$level]} -ge ${log_levels[$LOG_LEVEL]} ]] || return 0
	
	# Log to file
	if [[ -w "${PATHS[log]}" ]]; then
		printf "%s [%s] %s\n" "${timestamp}" "${level}" "${msg}" >> "${PATHS[log]}"
	fi
	
	# Log to stderr with colors for WARNING and ERROR
	if [[ "${level}" == "WARNING" || "${level}" == "ERROR" ]]; then
		printf "${log_colors[$level]}[%s] %s\033[0m\n" "${level}" "${msg}" >&2
	elif [[ "${LOG_LEVEL}" == "DEBUG" ]]; then
		printf "${log_colors[$level]}[%s] %s\033[0m\n" "${level}" "${msg}" >&2
	fi
}

# ========================
# Enhanced Wallpaper Tools Management
# ========================

get_available_tools() {
	local available_tools=()
	local tool_list
	
	case "${STATE[session_type]}" in
		"wayland")
			tool_list=("${WAYLAND_TOOLS[@]}" "${UNIVERSAL_TOOLS[@]}")
			;;
		"x11")
			tool_list=("${XORG_TOOLS[@]}" "${UNIVERSAL_TOOLS[@]}")
			;;
		*)
			tool_list=("${WAYLAND_TOOLS[@]}" "${XORG_TOOLS[@]}" "${UNIVERSAL_TOOLS[@]}")
			;;
	esac
	
	for tool in "${tool_list[@]}"; do
		if command -v "${tool}" >/dev/null 2>&1; then
			available_tools+=("${tool}")
		fi
	done
	
	printf '%s\n' "${available_tools[@]}"
}

set_wall() {
	local tool="$1" img="$2"
	
	command -v "${tool}" >/dev/null 2>&1 || {
		log ERROR "Tool not found: ${tool}"
		return 1
	}
	
	log DEBUG "Setting wallpaper with ${tool}: ${img}"
	
	case "${tool}" in
		# Wayland tools
		"swww")
			if ! pgrep -f "swww-daemon" >/dev/null 2>&1; then
				swww-daemon >/dev/null 2>&1 &
				sleep 1
			fi
			swww img "${img}" --transition-duration="${DURATION[transition]}" --transition-type=any
			;;
		"swaybg")
			pkill -f "swaybg" 2>/dev/null || true
			swaybg -i "${img}" -m fill >/dev/null 2>&1 &
			;;
		"hyprpaper")
			echo "wallpaper = ,${img}" > /tmp/hyprpaper.conf
			echo "splash = false" >> /tmp/hyprpaper.conf
			hyprpaper -c /tmp/hyprpaper.conf >/dev/null 2>&1 &
			;;
		"wbg")
			pkill -f "wbg" 2>/dev/null || true
			wbg "${img}" >/dev/null 2>&1 &
			;;
		"wpaperd")
			echo "[default]" > /tmp/wpaperd.toml
			echo "path = \"${img}\"" >> /tmp/wpaperd.toml
			wpaperd -d -c /tmp/wpaperd.toml >/dev/null 2>&1 &
			;;
		"oguri")
			echo "[output.*]" > /tmp/oguri.conf
			echo "image = \"${img}\"" >> /tmp/oguri.conf
			oguri -c /tmp/oguri.conf >/dev/null 2>&1 &
			;;
		
		# X11 tools
		"feh")
			feh --bg-fill "${img}" >/dev/null 2>&1
			;;
		"xwallpaper")
			xwallpaper --zoom "${img}" >/dev/null 2>&1
			;;
		"nitrogen")
			nitrogen --save --set-zoom-fill "${img}" >/dev/null 2>&1
			;;
		"hsetroot")
			hsetroot -fill "${img}" >/dev/null 2>&1
			;;
		"bgs")
			bgs "${img}" >/dev/null 2>&1 &
			;;
		"xsetroot")
			convert "${img}" -resize "$(xdpyinfo | awk '/dimensions/{print $2}')" /tmp/wallpaper_converted.png 2>/dev/null
			xsetroot -bitmap /tmp/wallpaper_converted.png >/dev/null 2>&1
			;;
		
		# Universal tools
		"wal")
			wal -i "${img}" -q >/dev/null 2>&1
			;;
		"matugen")
			matugen image "${img}" >/dev/null 2>&1
			;;
		"wpgtk")
			wpg -s "${img}" >/dev/null 2>&1
			;;
		
		*)
			log ERROR "Unsupported tool: ${tool}"
			return 1
			;;
	esac
	
	if [[ $? -eq 0 ]]; then
		STATE[current_tool]="${tool}"
		set_current_wallpaper "${img}"
		STATE[last_change]="$(date +%s)"
		log INFO "Wallpaper set successfully: ${img##*/} (${tool})"
		return 0
	else
		log ERROR "Failed to set wallpaper with ${tool}"
		return 1
	fi
}

set_wallpaper_with_fallback() {
	local img="$1"
	local success=0
	
	# Get available tools
	local available_tools
	mapfile -t available_tools < <(get_available_tools)
	
	if [[ ${#available_tools[@]} -eq 0 ]]; then
		log ERROR "No wallpaper tools available"
		return 1
	fi
	
	# Try each available tool until one succeeds
	for tool in "${available_tools[@]}"; do
		if set_wall "${tool}" "${img}"; then
			success=1
			break
		fi
		log WARNING "Failed with ${tool}, trying next..."
		sleep 0.1
	done
	
	if [[ ${success} -eq 0 ]]; then
		log ERROR "All wallpaper tools failed for: ${img}"
		return 1
	fi
	
	return 0
}

# ========================
# Enhanced Media Handling
# ========================

is_supported_format() {
	local file="$1"
	local ext="${file##*.}"
	ext="${ext,,}"
	
	for format in "${SUPPORTED_FORMATS[@]}"; do
		[[ "${ext}" == "${format}" ]] && return 0
	done
	
	return 1
}

is_animated() {
	local file="$1"
	local ext="${file##*.}"
	ext="${ext,,}"
	
	case "${ext}" in
		gif|mp4|mkv|avi|webm) return 0 ;;
		*) return 1 ;;
	esac
}

get_media_info() {
	local file="$1"
	local info=""
	
	if command -v identify >/dev/null 2>&1; then
		info=$(identify -format "%wx%h %m" "${file}" 2>/dev/null | head -n1)
	elif command -v file >/dev/null 2>&1; then
		info=$(file "${file}" 2>/dev/null)
	fi
	
	echo "${info}"
}

set_animated_wallpaper() {
	local media="$1"
	local ext="${media##*.}"
	ext="${ext,,}"
	
	[[ -f "${media}" ]] || {
		log ERROR "Media file not found: ${media}"
		return 1
	}
	
	# Clear previous animation
	stop_animation
	
	case "${STATE[session_type]}" in
		"wayland")
			if command -v mpvpaper >/dev/null 2>&1; then
				local mpv_options=""
				[[ "${DURATION[video_loop]}" == "true" ]] && mpv_options+="--loop-file"
				
				mpvpaper ${mpv_options} "*" "${media}" >/dev/null 2>&1 &
				STATE[animation_pid]=$!
				log INFO "Started animated wallpaper with mpvpaper: ${media##*/}"
			else
				log ERROR "mpvpaper required for animated wallpapers on Wayland"
				return 1  
			fi
			;;
		"x11")
			if [[ "${ext}" == "gif" ]]; then
				set_gif_x11 "${media}"
			elif command -v xwinwrap >/dev/null 2>&1; then
				xwinwrap -g "$(xdpyinfo | awk '/dimensions/{print $2}')"+0+0 -ov -ni -s -nf -- mpv -wid WID --loop-file --no-audio --no-osc --no-osd-bar "${media}" >/dev/null 2>&1 &
				STATE[animation_pid]=$!
				log INFO "Started animated wallpaper with xwinwrap+mpv: ${media##*/}"
			else
				log ERROR "xwinwrap or suitable tool required for animated wallpapers on X11"
				return 1
			fi
			;;
		*)
			log ERROR "Unknown session type for animated wallpaper"
			return 1
			;;
	esac
	
	set_current_wallpaper "${media}"
	save_animation_pid
	return 0
}

set_gif_x11() {
	local gif="$1"
	
	command -v convert >/dev/null 2>&1 || {
		log ERROR "ImageMagick required for GIF handling"
		return 1
	}
	
	local hash frame_dir
	hash=$(md5sum "${gif}" | cut -d' ' -f1)
	frame_dir="${PATHS[state_dir]}/gif_${hash}"
	
	# Extract frames if not already done
	if [[ ! -d "${frame_dir}" ]]; then
		mkdir -p "${frame_dir}"
		log DEBUG "Extracting GIF frames to ${frame_dir}"
		convert "${gif}" -coalesce "${frame_dir}/frame_%04d.png" || {
			log ERROR "Failed to extract GIF frames"
			return 1
		}
	fi
	
	# Animate frames
	(
		local delay="${DURATION[gif_speed]}"
		# Try to get actual GIF delay
		local gif_delay
		if gif_delay=$(identify -format "%T\n" "${gif}" 2>/dev/null | awk '{sum+=$1} END{if(NR>0) printf "%.3f", (sum/NR)/100; else print 0.05}'); then
			[[ "${gif_delay}" != "0.000" ]] && delay="${gif_delay}"
		fi
		
		while :; do
			for frame in "${frame_dir}"/frame_*.png; do
				[[ -f "${frame}" ]] || break
				set_wall "feh" "${frame}" >/dev/null 2>&1 || true
				sleep "${delay}"
			done
		done
	) &
	
	STATE[animation_pid]=$!
	log INFO "Started GIF animation: ${gif##*/} (delay: ${delay}s)"
}

stop_animation() {
	if [[ -n "${STATE[animation_pid]}" ]]; then
		kill -TERM "${STATE[animation_pid]}" 2>/dev/null || true
		STATE[animation_pid]=""
		rm -f "${PATHS[state_dir]}/animation_pid"
		log DEBUG "Stopped animation process"
	fi
	
	# Kill known animation processes
	pkill -f "mpvpaper" 2>/dev/null || true
	pkill -f "xwinwrap" 2>/dev/null || true
}

# ========================
# Enhanced Randomization System
# ========================

get_true_random() {
	local max="$1"
	local random_num
	
	if [[ -r /dev/urandom ]]; then
		# Use high-quality entropy from /dev/urandom
		random_num=$(od -An -N4 -tu4 < /dev/urandom | tr -d ' ')
		echo $(( random_num % max ))
	else
		# Fallback to enhanced PRNG
		local seed
		seed=$(( $(date +%s%N) ^ $$ ^ $(ps -eo pid= | wc -l) ))
		RANDOM=${seed}
		echo $(( RANDOM % max ))
	fi
}

shuffle_array() {
	local -n arr=$1
	local i j temp
	
	# Fisher-Yates shuffle algorithm with true randomization
	for ((i=${#arr[@]}-1; i>0; i--)); do
		j=$(get_true_random $((i+1)))
		# Swap elements
		temp="${arr[i]}"
		arr[i]="${arr[j]}"
		arr[j]="${temp}"
	done
}

get_random_wallpaper() {
	local dir="$1"
	local exclude_current="${2:-false}"
	
	[[ -d "${dir}" ]] || {
		log ERROR "Directory not found: ${dir}"
		return 1
	}
	
	# Build find command for supported formats
	local find_cmd="find \"${dir}\" -type f \\("
	local first=true
	for format in "${SUPPORTED_FORMATS[@]}"; do
		[[ "${first}" == "true" ]] && first=false || find_cmd+=" -o"
		find_cmd+=" -iname \"*.${format}\""
	done
	find_cmd+=" \\)"
	
	# Get all files
	local files
	mapfile -t files < <(eval "${find_cmd}")
	
	if [[ ${#files[@]} -eq 0 ]]; then
		log WARNING "No supported media files found in ${dir}"
		return 1
	fi
	
	# Remove current wallpaper from selection if requested
	if [[ "${exclude_current}" == "true" && -n "${STATE[current_wallpaper]}" ]]; then
		local filtered_files=()
		for file in "${files[@]}"; do
			[[ "${file}" != "${STATE[current_wallpaper]}" ]] && filtered_files+=("${file}")
		done
		files=("${filtered_files[@]}")
	fi
	
	[[ ${#files[@]} -eq 0 ]] && {
		log WARNING "No alternative wallpapers available"
		return 1
	}
	
	# Shuffle and select
	shuffle_array files
	echo "${files[0]}"
}

wallpaper_directory() {
	case "${STATE[battery]}" in
		"discharging")
			echo "${PATHS[static]}"
			;;
		*)
			if [[ "${FEATURES[animation_available]}" == "true" ]]; then
				echo "${PATHS[dynamic]}"
			else
				echo "${PATHS[static]}"
			fi
			;;
	esac
}

# ========================
# Slideshow Management
# ========================

slideshow() {
	log INFO "Starting slideshow"
	
	[[ "$(get_status)" == "running" ]] && {
		log WARNING "Slideshow already running (PID: ${STATE[pid]})"
		return 0
	}
	
	stop_slideshow
	set_status running
	
	(
		while [[ "$(get_status)" == "running" ]]; then
			local dir wallpaper
			
			dir="$(wallpaper_directory)"
			wallpaper="$(get_random_wallpaper "${dir}" true)"
			
			if [[ -n "${wallpaper}" ]]; then
				set_wallpaper "${wallpaper}"
			else
				log WARNING "No wallpaper selected, retrying in 30 seconds"
				sleep 30 &
				wait $!
				continue
			fi
			
			# Wait for next change
			sleep "${DURATION[change]}" &
			wait $!
		done
	) >/dev/null 2>&1 &
	
	STATE[pid]=$!
	save_pid
	disown $!
	
	log INFO "Slideshow started (PID: ${STATE[pid]})"
}

set_wallpaper() {
	local wallpaper="$1"
	
	[[ -f "${wallpaper}" ]] || {
		log ERROR "Wallpaper file not found: ${wallpaper}"
		return 1
	}
	
	is_supported_format "${wallpaper}" || {
		log WARNING "Unsupported format: ${wallpaper}"
		return 1
	}
	
	log INFO "Setting wallpaper: ${wallpaper##*/}"
	
	if is_animated "${wallpaper}"; then
		if [[ "${FEATURES[animation_available]}" == "true" ]]; then
			set_animated_wallpaper "${wallpaper}"
		else
			log WARNING "Animation not supported, skipping: ${wallpaper##*/}"
			return 1
		fi
	else
		set_wallpaper_with_fallback "${wallpaper}"
	fi
}

stop_slideshow() {
	get_pids
	
	# Stop main slideshow process
	if [[ -n "${STATE[pid]}" ]]; then
		kill -TERM "${STATE[pid]}" 2>/dev/null || true
		STATE[pid]=""
		rm -f "${PATHS[state_dir]}/pid"
		log DEBUG "Stopped slideshow process"
	fi
	
	# Stop animation
	stop_animation
	
	# Kill wallpaper tools that might be running
	for tool in "${WAYLAND_TOOLS[@]}" "${XORG_TOOLS[@]}"; do
		pkill -f "${tool}" 2>/dev/null || true
	done
	
	set_status stopped
	log INFO "Slideshow stopped"
}

pause_slideshow() {
	get_pids
	
	[[ "$(get_status)" != "running" ]] && {
		log WARNING "Cannot pause - slideshow not running"
		return 1
	}
	
	[[ -n "${STATE[pid]}" ]] && kill -STOP "${STATE[pid]}" 2>/dev/null
	[[ -n "${STATE[animation_pid]}" ]] && kill -STOP "${STATE[animation_pid]}" 2>/dev/null
	
	set_status paused
	log INFO "Slideshow paused"
}

resume_slideshow() {
	get_pids
	
	[[ "$(get_status)" != "paused" ]] && {
		log WARNING "Cannot resume - slideshow not paused"
		return 1
	}
	
	[[ -n "${STATE[pid]}" ]] && kill -CONT "${STATE[pid]}" 2>/dev/null
	[[ -n "${STATE[animation_pid]}" ]] && kill -CONT "${STATE[animation_pid]}" 2>/dev/null
	
	set_status running
	log INFO "Slideshow resumed"
}

randomize_wallpaper() {
	local dir wallpaper
	
	log INFO "Setting random wallpaper"
	
	dir="$(wallpaper_directory)"
	wallpaper="$(get_random_wallpaper "${dir}" true)"
	
	if [[ -n "${wallpaper}" ]]; then
		# Stop any running slideshow first
		stop_slideshow
		set_wallpaper "${wallpaper}"
		log INFO "Random wallpaper set: ${wallpaper##*/}"
	else
		log ERROR "Failed to get random wallpaper"
		return 1
	fi
}

# ========================
# State Management
# ========================

set_status() {
	STATE[status]="$1"
	echo "${STATE[status]}" > "${PATHS[state_dir]}/status"
}

get_status() {
	if [[ -f "${PATHS[state_dir]}/status" ]]; then
		cat "${PATHS[state_dir]}/status"
	else
		echo "stopped"
	fi
}

save_pid() {
	echo "${STATE[pid]}" > "${PATHS[state_dir]}/pid"
}

save_animation_pid() {
	echo "${STATE[animation_pid]}" > "${PATHS[state_dir]}/animation_pid"
}

get_pids() {
	[[ -f "${PATHS[state_dir]}/pid" ]] && STATE[pid]=$(cat "${PATHS[state_dir]}/pid")
	[[ -f "${PATHS[state_dir]}/animation_pid" ]] && STATE[animation_pid]=$(cat "${PATHS[state_dir]}/animation_pid")
}

set_current_wallpaper() {
	STATE[current_wallpaper]="$1"
	echo "${STATE[current_wallpaper]}" > "${PATHS[state_dir]}/current_wallpaper"
}

get_current_wallpaper() {
	if [[ -f "${PATHS[state_dir]}/current_wallpaper" ]]; then
		echo "Current wallpaper: $(cat "${PATHS[state_dir]}/current_wallpaper")"
	else
		echo "Current wallpaper: none"
	fi
}

# ========================
# Manual Selection
# ========================

manual_select() {
	local dir preview_cmd selected
	
	dir="$(wallpaper_directory)"
	[[ -d "${dir}" ]] || {
		log ERROR "Wallpaper directory not found: ${dir}"
		return 1
	}
	
	command -v fzf >/dev/null 2>&1 || {
		log ERROR "fzf required for manual selection"
		return 1
	}
	
	# Set up preview command
	if [[ "${FEATURES[preview_available]}" == "true" ]]; then
		if command -v chafa >/dev/null 2>&1; then
			preview_cmd="chafa --format=symbols --symbols=vhalf --fill=space --view-size=\${FZF_PREVIEW_COLUMNS}x\${FZF_PREVIEW_LINES} {}"
		elif command -v viu >/dev/null 2>&1; then
			preview_cmd="viu -w \${FZF_PREVIEW_COLUMNS} {}"
		elif command -v catimg >/dev/null 2>&1; then
			preview_cmd="catimg -w \${FZF_PREVIEW_COLUMNS} {}"
		else
			preview_cmd="file {}"
		fi
	else
		preview_cmd="file {}"
	fi
	
	# Build find command
	local find_cmd="find \"${dir}\" -type f \\("
	local first=true
	for format in "${SUPPORTED_FORMATS[@]}"; do
		[[ "${first}" == "true" ]] && first=false || find_cmd+=" -o"
		find_cmd+=" -iname \"*.${format}\""
	done
	find_cmd+=" \\)"
	
	selected=$(eval "${find_cmd}" | fzf \
		--preview="${preview_cmd}" \
		--preview-window="right:50%:wrap" \
		--header="Select wallpaper (ESC to cancel)" \
		--border \
		--height=80%)
	
	[[ -z "${selected}" ]] && {
		echo "No wallpaper selected"
		return 0
	}
	
	# Stop slideshow and set selected wallpaper
	stop_slideshow
	set_wallpaper "${selected}"
}

# ========================
# Status and Information
# ========================

show_environment() {
	printf "\n\033[1;36m%s\033[0m\n" "$(printf '=%.0s' {1..60})"
	printf "\033[1;36m%-30s\033[0m\n" "Universal Wallpaper Manager v${VERSION}"
	printf "\033[1;36m%s\033[0m\n\n" "$(printf '=%.0s' {1..60})"
	
	printf "\033[1;33m%-25s\033[0m %s\n" "Session Type:" "${STATE[session_type]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Desktop Environment:" "${STATE[desktop]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Compositor:" "${STATE[compositor]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Battery Status:" "${STATE[battery]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Current Status:" "$(get_status)"
	
	printf "\n\033[1;36m%-30s\033[0m\n" "FEATURES"
	printf "\033[1;33m%-25s\033[0m %s\n" "Wayland Support:" "${FEATURES[wayland_support]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "X11 Support:" "${FEATURES[xorg_support]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Animation Support:" "${FEATURES[animation_available]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Preview Available:" "${FEATURES[preview_available]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Battery Detection:" "${FEATURES[battery_detection]}"
	
	printf "\n\033[1;36m%-30s\033[0m\n" "PROCESSES"
	printf "\033[1;33m%-25s\033[0m %s\n" "Main PID:" "${STATE[pid]:-none}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Animation PID:" "${STATE[animation_pid]:-none}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Current Tool:" "${STATE[current_tool]:-none}"
	
	printf "\n\033[1;36m%-30s\033[0m\n" "AVAILABLE TOOLS"
	local available_tools
	mapfile -t available_tools < <(get_available_tools)
	printf "\033[1;33m%-25s\033[0m %s\n" "Wallpaper Tools:" "${available_tools[*]:-none}"
	
	printf "\n\033[1;36m%-30s\033[0m\n" "CONFIGURATION"
	printf "\033[1;33m%-25s\033[0m %s\n" "Static Directory:" "${PATHS[static]}"
	printf "\033[1;33m%-25s\033[0m %s\n" "Dynamic Directory:" "${PATHS[dynamic]}"
	printf "\033[1;33m%-25s\033[0m %d seconds\n" "Change Interval:" "${DURATION[change]}"
	printf "\033[1;33m%-25s\033[0m %.2f seconds\n" "Transition Duration:" "${DURATION[transition]}"
	
	get_current_wallpaper
	
	printf "\n\033[1;36m%-30s\033[0m\n" "RECENT ACTIVITY"
	if [[ -f "${PATHS[log]}" ]]; then
		tail -n 5 "${PATHS[log]}" | while IFS= read -r line; do
			printf "\033[0;37m%s\033[0m\n" "${line}"
		done
	else
		printf "\033[0;37m%s\033[0m\n" "No recent activity"
	fi
	printf "\n"
}

time_until_next() {
	[[ "$(get_status)" != "running" ]] && {
		echo "Slideshow not active"
		return
	}
	
	local last_change="${STATE[last_change]:-0}"
	local current_time
	current_time=$(date +%s)
	local elapsed=$((current_time - last_change))
	local remaining=$((DURATION[change] - elapsed))
	
	[[ ${remaining} -lt 0 ]] && remaining=0
	
	printf "Next change in: %d min %d sec\n" $((remaining / 60)) $((remaining % 60))
}

cleanup_and_exit() {
	log DEBUG "Cleaning up and exiting"
	stop_slideshow >/dev/null 2>&1
	exit 0
}

# ========================
# Configuration Management
# ========================

create_sample_config() {
	local config_dir
	config_dir=$(dirname "${CONFIG_FILE}")
	
	[[ ! -d "${config_dir}" ]] && mkdir -p "${config_dir}"
	
	cat > "${CONFIG_FILE}" << 'EOF'
# Universal Wallpaper Manager Configuration
# This file is sourced by the script, so use bash syntax

# Wallpaper directories
PATHS[static]="${HOME}/Pictures/wallpapers"
PATHS[dynamic]="${HOME}/Pictures/wallpapers/gifs"
PATHS[videos]="${HOME}/Pictures/wallpapers/videos"

# Timing configuration (in seconds)
DURATION[change]=540           # Slideshow interval
DURATION[transition]=0.7       # Transition duration for supported tools
DURATION[gif_speed]=0.05       # GIF frame delay

# Logging level (DEBUG|INFO|WARNING|ERROR)
LOG_LEVEL="INFO"

# Features
DURATION[video_loop]=true      # Loop video wallpapers

# Tool preferences (optional - will auto-detect if not specified)
# PREFERRED_WAYLAND_TOOL="swww"
# PREFERRED_XORG_TOOL="feh"
EOF
	
	echo "Sample configuration created at: ${CONFIG_FILE}"
	echo "Edit this file to customize your settings"
}

# ========================
# Command Line Interface
# ========================

usage() {
	cat << EOF
Universal Wallpaper Manager v${VERSION}
A feature-rich wallpaper management system supporting all desktop environments

Usage: ${SCRIPT_NAME} <command> [options]

Commands:
  start           Start wallpaper slideshow
  stop            Stop wallpaper slideshow  
  pause           Pause wallpaper slideshow
  resume          Resume wallpaper slideshow
  randomize       Set a random wallpaper immediately
  set             Manually select and set wallpaper (requires fzf)
  status          Show current slideshow status
  current         Show current wallpaper
  time            Show time until next wallpaper change
  env             Show detailed environment information
  config          Create sample configuration file
  version         Show version information
  help            Show this help message

Examples:
  ${SCRIPT_NAME} start          # Start slideshow
  ${SCRIPT_NAME} randomize      # Set random wallpaper now
  ${SCRIPT_NAME} set            # Interactive wallpaper selection
  ${SCRIPT_NAME} env            # Show system information

Configuration:
  Edit ~/.config/hypr/hypr-wallshow.conf to customize settings
  Run '${SCRIPT_NAME} config' to create a sample configuration

Supported Formats:
  Images: ${SUPPORTED_FORMATS[*]}
  
Log File: ${PATHS[log]}
EOF
}

# ========================
# Main Execution
# ========================

main() {
	# Initialize system
	init
	
	# Handle command line arguments
	case "${1:-help}" in
		start|slideshow)
			slideshow
			;;
		stop)
			stop_slideshow
			;;
		pause)
			pause_slideshow
			;;
		resume)
			resume_slideshow
			;;
		randomize|random)
			randomize_wallpaper
			;;
		set|select|manual)
			manual_select
			;;
		status)
			printf "Slideshow status: %s\n" "$(get_status)"
			;;
		current)
			get_current_wallpaper
			;;
		time|next)
			time_until_next
			;;
		env|environment|info)
			show_environment
			;;
		config)
			create_sample_config
			;;
		version)
			echo "Universal Wallpaper Manager v${VERSION}"
			;;
		help|--help|-h)
			usage
			;;
		*)
			echo "Unknown command: $1" >&2
			echo "Run '${SCRIPT_NAME} help' for usage information" >&2
			exit 1
			;;
	esac
}

# Execute main function with all arguments
main "$@"
